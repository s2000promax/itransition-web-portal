// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("VERCEL_DATABASE_URL")
}

model User {
    id        String        @id @default(uuid())
    firstName String        @map("first_name")
    lastName  String        @map("last_name")
    email     String        @unique
    password  String?
    avatar    String
    createdAt DateTime      @default(now()) @map("created_at")
    updatedAt DateTime      @updatedAt @map("updated_at")
    token     Token[]
    roles     UserRole[]
    isBlocked Boolean       @default(false) @map("is_blocked")
    settings  Settings[]
    reviews   Review[]
    likes     Like[]
    ratings   UsersRating[]
    comments  Comment[]
    hiddens   HiddenList[]
    provider  String?

    @@map("users")
}

model Token {
    token   String   @unique
    expired DateTime
    user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId  String

    @@map("tokens")
}

model Review {
    id            String         @id @default(uuid())
    owner         User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId       String
    title         String
    subtitle      String
    cover         String
    tags          ReviewTag[]
    type          ReviewTypeEnum
    blocks        ReviewBlock[]
    createdAt     DateTime       @default(now()) @map("created_at")
    updatedAt     DateTime       @updatedAt @map("updated_at")
    ownerRating   Int            @map("owner_rating")
    averageRating Int            @map("average_rating")
    viewCount     Int            @map("view_count")
    likesCount    Int            @map("likes_count")
    likes         Like[]
    ratings       UsersRating[]
    comments      Comment[]
    hiddens       HiddenList[]

    @@map("reviews")
}

model ReviewBlock {
    id         String        @id @default(uuid())
    review     Review        @relation(fields: [reviewId], references: [id], onDelete: Cascade)
    reviewId   String
    type       BlockTypeEnum
    title      String?
    src        String?
    paragraphs Paragraph[]
    code       String?

    @@map("reviewBlocks")
}

model Paragraph {
    content       String?
    reviewBlock   ReviewBlock @relation(fields: [reviewBlockId], references: [id], onDelete: Cascade)
    reviewBlockId String      @id
}

model ReviewTag {
    review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
    reviewId String
    tag      Tag    @relation(fields: [tagId], references: [name], onDelete: Cascade)
    tagId    String

    @@id([reviewId, tagId])
    @@map("reviewTags")
}

model Tag {
    name       String      @unique
    reviewTags ReviewTag[]

    @@map("tags")
}

model Like {
    user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId   String
    like     Boolean @default(false)
    review   Review  @relation(fields: [reviewId], references: [id], onDelete: Cascade)
    reviewId String

    @@id([userId, reviewId])
    @@map("likes")
}

model UsersRating {
    rating   Int
    feedback String
    user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId   String
    review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
    reviewId String

    @@id([userId, reviewId])
    @@map("usersRatings")
}

model Comment {
    id       String @id @default(uuid())
    content  String
    user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId   String
    review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
    reviewId String

    @@map("comments")
}

model HiddenList {
    user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId   String
    review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
    reviewId String

    @@id([userId, reviewId])
    @@map("hiddenList")
}

model Role {
    id    String     @id @default(uuid())
    name  RolesEnum
    users UserRole[]
}

model UserRole {
    roleId String
    userId String
    role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, roleId])
}

model Settings {
    theme        String
    language     String
    isFirstVisit Boolean
    user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String  @id
}

enum RolesEnum {
    SA
    ADMIN
    USER
}

enum BlockTypeEnum {
    TEXT
    IMAGE
    CODE
}

enum ReviewTypeEnum {
    ALL
    IT
    MUSIC
    MOVIES
    GAMES
    TECHOLOGY
    STARTUPS
    SCIENCE
}
