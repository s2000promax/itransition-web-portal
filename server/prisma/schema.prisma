// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("VERCEL_DATABASE_URL")
}

model User {
    id           String        @id @default(uuid())
    firstName    String        @map("first_name")
    lastName     String        @map("last_name")
    email        String        @unique
    password     String?
    avatar       String        @db.VarChar(2048)
    createdAt    DateTime      @default(now()) @map("created_at")
    updatedAt    DateTime      @updatedAt @map("updated_at")
    roles        UserRole[]
    isBlocked    Boolean       @default(false) @map("is_blocked")
    settings     Settings[]
    reviews      Review[]
    likes        Like[]
    likesCounter BigInt        @default(0) @map("likes_counter") @db.UnsignedBigInt
    views        UniqueViews[]
    ratings      UsersRating[]
    comments     Comment[]
    token        Token[]
    provider     String?

    @@map("users")
}

model Token {
    user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId  String
    token   String   @unique
    expired DateTime

    @@map("tokens")
}

model Work {
    id            String         @id @default(uuid())
    title         String         @db.Text
    cover         String         @db.VarChar(2048)
    description   String         @db.Text
    type          ReviewTypeEnum @default(ALL)
    averageRating Float          @default(0) @map("average_rating")
    reviews       Review[]
    ratings       UsersRating[]

    @@map("works")
}

model Review {
    id          String         @id @default(uuid())
    work        Work           @relation(fields: [workId], references: [id])
    workId      String
    owner       User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId     String
    title       String         @db.Text
    workTitle   String         @db.Text
    cover       String         @db.VarChar(2048)
    tags        ReviewTag[]
    type        ReviewTypeEnum
    blocks      ReviewBlock[]
    createdAt   DateTime       @default(now()) @map("created_at")
    updatedAt   DateTime       @updatedAt @map("updated_at")
    ownerRating Int            @map("owner_rating") @db.UnsignedTinyInt
    viewCounter BigInt         @map("view_count") @db.UnsignedBigInt
    comments    Comment[]
    views       UniqueViews[]
    likes       Like[]

    @@map("reviews")
}

model ReviewBlock {
    id         String        @id @default(uuid())
    review     Review        @relation(fields: [reviewId], references: [id], onDelete: Cascade)
    reviewId   String
    sortId     Int           @db.UnsignedTinyInt
    type       BlockTypeEnum
    title      String?       @db.Text
    src        String?       @db.VarChar(2048)
    code       String?       @db.Text
    paragraphs Paragraph[]

    @@map("reviewBlocks")
}

model Paragraph {
    id            String      @id @default(uuid())
    reviewBlock   ReviewBlock @relation(fields: [reviewBlockId], references: [id], onDelete: Cascade)
    reviewBlockId String
    sortId        Int         @db.UnsignedTinyInt
    content       String?     @db.Text

    @@map("paragraphs")
}

model ReviewTag {
    review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
    reviewId String
    tag      Tag    @relation(fields: [tagId], references: [name], onDelete: Cascade)
    tagId    String

    @@id([reviewId, tagId])
    @@map("reviewTags")
}

model Tag {
    name       String      @unique
    reviewTags ReviewTag[]

    @@map("tags")
}

model Like {
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
    reviewId  String
    createdAt DateTime @default(now()) @map("created_at")

    @@id([userId, reviewId])
    @@map("likes")
}

model UniqueViews {
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
    reviewId  String
    createdAt DateTime @default(now()) @map("created_at")

    @@id([userId, reviewId])
    @@map("uniqueViews")
}

model UsersRating {
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    work      Work     @relation(fields: [workId], references: [id], onDelete: Cascade)
    workId    String
    createdAt DateTime @default(now()) @map("created_at")
    rate      Int      @db.UnsignedTinyInt
    feedback  String   @db.Text

    @@id([userId, workId])
    @@map("usersRatings")
}

model Comment {
    id        String   @id @default(uuid())
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
    reviewId  String
    createdAt DateTime @default(now()) @map("created_at")
    content   String   @db.Text

    @@map("comments")
}

model Role {
    id    String     @id @default(uuid())
    users UserRole[]
    name  RolesEnum

    @@map("roles")
}

model UserRole {
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    roleId String
    role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

    @@id([userId, roleId])
    @@map("userRoles")
}

model Settings {
    user                   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId                 String  @id
    theme                  String
    language               String
    isFirstVisit           Boolean @map("is_first_visit")
    isReviewsPageWasOpened Boolean @map("is_reviews_page_was_opened")

    @@map("settings")
}

enum RolesEnum {
    SA
    ADMIN
    USER
}

enum BlockTypeEnum {
    TEXT
    IMAGE
    CODE
}

enum ReviewTypeEnum {
    ALL
    IT
    MUSIC
    MOVIES
    GAMES
    TECHOLOGY
    STARTUPS
    SCIENCE
}
